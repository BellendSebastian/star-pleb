
define('Galaxy',[],function () {
    

    function Galaxy() {
        this.systems = [];
    }

    Galaxy.prototype.setSystems = function (systems) {
        this.systems = systems;
        return this;
    };

    return Galaxy;
});

define('Universe',[
    'Galaxy'
], function (
    Galaxy
) {
    

    function Universe() {
        this.galaxies = [];
    }

    Universe.prototype.setGalaxies = function (galaxies) {
        this.galaxies = galaxies;
        return this;
    };

    return Universe;
});

define('System',[],function () {
    

    function System() {
        this.bodies = [];
    }

    System.prototype.setBodies = function (bodies) {
        this.bodies = bodies;
        return this;
    };

    return System;
});

define('AstralBody',[],function () {
    

    function AstralBody(name) {
        this.name = name;
    }

    return AstralBody;
});

define('Star',[
    'AstralBody'
], function (
    AstralBody
) {
    

    Star.prototype = new AstralBody();
    Star.prototype.constructor = Star;

    function Star(name) {
        AstralBody.call(this, name);
    }

    return Star;
});

define('Planet',[
    'AstralBody'
], function (
    AstralBody
) {
    

    Planet.prototype = new AstralBody();
    Planet.prototype.constructor = Planet;

    function Planet(name) {
        AstralBody.call(this, name);
        this.satellites = [];
    }

    Planet.prototype.setSatellites = function (satellites) {
        this.satellites = satellites;
        return this;
    };

    return Planet;
});


define('Satellite',[
    'AstralBody'
], function (
    AstralBody
) {
    

    Satellite.prototype = new AstralBody();
    Satellite.prototype.constructor = Satellite;

    function Satellite(name) {
        AstralBody.call(this, name);
    }

    return Satellite;
});

define('NameGenerator',[],function () {
    

    function NameGenerator() { }

    NameGenerator.generateStarName = function () {
        var str = 'ST-';
        var rand = Math.ceil(Math.random() * 99999);
        str = str + rand.toString(16);
        return str.toUpperCase();
    };

    NameGenerator.generatePlanetName = function () {
        var str = 'PL-';
        var rand = Math.ceil(Math.random() * 99999);
        str = str + rand.toString(16);
        return str.toUpperCase();
    };

    NameGenerator.generateSatelliteName = function (parent) {
        var str = parent;
        var rand = Math.ceil(Math.random() * 99);
        str = str + '-' + rand.toString(16);
        return str.toUpperCase();
    };

    return NameGenerator;
});

define('LocationFactory',[
    'Universe',
    'Galaxy',
    'System',
    'Star',
    'Planet',
    'Satellite',
    'NameGenerator'
], function (
    Universe,
    Galaxy,
    System,
    Star,
    Planet,
    Satellite,
    NameGenerator
) {
    

    function LocationFactory() { }

    LocationFactory.generateUniverse = function () {
        var universe = new Universe();
        var minUniverseSize = 10;
        var maxUniverseSize = 20;
        var galaxyCount = Math.floor(Math.random() * (maxUniverseSize - minUniverseSize) + minUniverseSize);
        var galaxies = [];
        for (var i = 0; i < galaxyCount; i++) {
            galaxies[i] = LocationFactory.generateGalaxy();
        }
        universe.setGalaxies(galaxies);
        return universe;
    };

    LocationFactory.generateGalaxy = function () {
        var galaxy = new Galaxy();
        var maxSystems = 10;
        var systemCount = Math.ceil(Math.random() * maxSystems);
        var systems = [];
        for (var i = 0; i < systemCount; i++) {
            systems[i] = LocationFactory.generateSystem();
        }
        galaxy.setSystems(systems);
        return galaxy;
    };

    LocationFactory.generateSystem = function () {
        var system = new System();
        var maxStars = 3;
        var maxPlanets = 9;
        var starCount = Math.ceil(Math.random() * maxStars);
        var planetCount = Math.ceil(Math.random() * maxPlanets);
        var bodies = [];
        for (var i = 0; i < starCount; i++) {
            bodies.push(new Star(NameGenerator.generateStarName()));
        }
        for (var j = 0; j < planetCount; j++) {
            bodies.push(LocationFactory.generatePlanet());
        }
        system.setBodies(bodies);
        return system;
    };

    LocationFactory.generatePlanet = function () {
        var planetName = NameGenerator.generatePlanetName();
        var planet = new Planet(planetName);
        var satelliteCount = Math.floor(Math.random() * 4 - 1);
        var satellites = [];
        for (var i = 0; i < satelliteCount; i++) {
            satellites[i] = new Satellite(NameGenerator.generateSatelliteName(planetName));
        }
        planet.setSatellites(satellites);
        return planet;
    };

    return LocationFactory;
});

define('Ship',[

], function (

) {
    

    function Ship() {
        this.hullType = null;
        this.hull = 0;
        this.shields = [];
        this.weapons = [];
        this.drones = [];
        this.shieldCapacity = 0;
    }

    Ship.prototype.setHullType = function (hullType) {
        this.hullType = hullType;
        this.setHull(hullType.strength);
        return this;
    };

    Ship.prototype.setHull = function (num) {
        this.hull = num;
        return this;
    };

    Ship.prototype.addShield = function (shield) {
        if (this.shields.length >= this.hullType.shieldSlots) { return; }
        this.shields.push(shield);
        this.updateShieldCapacity();
        return this;
    };

    Ship.prototype.addWeapon = function (weapon) {
        if (this.weapons.length >= this.hullType.weaponSlots) { return; }
        this.weapons.push(weapon);
    };

    Ship.prototype.updateShieldCapacity = function () {
        var capacity = 0;
        this.shields.forEach(function (shield) {
            capacity += shield.capacity;
        });
        this.shieldCapacity = capacity;
    };

    return Ship;
});

define('HullTypes',[],function () {
    

    var HullTypes = {
        'POD': {
            'shieldSlots': 1,
            'weaponSlots': 0,
            'strength': 40
        },
        'SCOUT': 1,
        'LIGHT': 2,
        'MEDIUM': 3,
        'HEAVY': 4,
        'TITAN': 5,
        'FREIGHT': 6,
        'CARRIER': 7
    };

    return HullTypes;
});

define('WeaponTypes',[

], function (

) {
    

    function WeaponTypes() { }

    return WeaponTypes;
});

define('Component',[

], function (

) {
    

    function Component() { }

    return Component;
});

define('Weapon',[
    'Component'
], function (
    Component
) {
    

    Weapon.prototype = new Component();
    Weapon.prototype.constructor = Weapon;

    function Weapon() { }

    return Weapon;
});


define('Shield',[
    'Component'
], function (
    Component
) {
    

    Shield.prototype = new Component();
    Shield.prototype.constructor = Shield;

    function Shield(capacity) {
        this.capacity = capacity;
    }

    return Shield;
});

define('ShipFactory',[
    'Ship',
    'HullTypes',
    'WeaponTypes',
    'Weapon',
    'Shield'
], function (
    Ship,
    HullTypes,
    WeaponTypes,
    Weapon,
    Shield
) {
    

    function ShipFactory() { }

    ShipFactory.generatePod = function () {
        var ship = new Ship();
        ship.setHullType(HullTypes.POD)
            .addShield(new Shield(80));
        return ship;
    };

    return ShipFactory;
});

define('Player',[
    'ShipFactory'
], function (
    ShipFactory
) {
    

    function Player() {
        this.ship = ShipFactory.generatePod();
    }

    return Player;
});

define('StarPleb',[
    'LocationFactory',
    'Player'
], function (
    LocationFactory,
    Player
) {
    

    function StarPleb() {
        this.universe = LocationFactory.generateUniverse();
        this.player = new Player();
    }

    return StarPleb;
});

require([
    'StarPleb'
], function (
    StarPleb
) {
    

    (function () {
        window.sp = new StarPleb();
    })();
});


define("main", function(){});
